[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# G.FUNCS.play_cards_from_highlighted
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.play and G.play.cards[1] then return end"
position = "after"
payload = """local prev_chips = G.GAME.chips
BlackHole.hover_suppressed = true"""
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.FUNCS.evaluate_play()"
position = "after"
payload = """G.E_MANAGER:add_event(Event({
    func = function()
        tts.say(localize{
            type = 'variable', 
            key = 'tts_score_report',
            vars = { number_format(hand_chips*mult), number_format(prev_chips+hand_chips*mult) }
        })
        if prev_chips+hand_chips*mult >= G.GAME.blind.chips then
            tts.say(localize('tts_blind_defeated'))
        else
            tts.say(localize{
                type = 'variable',
                key = 'tts_required_score',
                vars = { number_format(G.GAME.blind.chips) }
            })
        end
        return true
    end
}))

"""
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.current_round.hands_played = G.GAME.current_round.hands_played + 1"
position = "after"
payload = """G.E_MANAGER:add_event(Event({
    trigger = 'after',
    delay = 2.0*math.sqrt(G.SETTINGS.GAMESPEED),
    blocking = false,
    func = function()
        BlackHole.hover_suppressed = nil
        return true
    end
}))
"""
match_indent = true

#G.FUNCS.discard_cards_from_highlighted
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "G.GAME.round_scores.cards_discarded.amt = G.GAME.round_scores.cards_discarded.amt + #cards"
position = "after"
payload = """BlackHole.hover_suppressed = true
G.E_MANAGER:add_event(Event({
    func = function()
        tts.silence()
        if hook then
            local card_names = ''
            for k, card in ipairs(cards) do
                local AUT = card:generate_UIBox_ability_table()
                if AUT.name and type(AUT.name) == 'table' then
                    if ((AUT.name[1] or {}).config or {}).object then
                        card_names = card_names..AUT.name[1].config.object.string.. ' - '
                    else
                        local name_text = ''
                        for _, v in ipairs(AUT.name) do
                            if v.config and type(v.config.text) == 'string' then name_text = name_text..v.config.text end
                        end
                        card_names = card_names .. name_text .. ' - '
                    end
                end
            end
            tts.say(localize{
                type = 'variable',
                key = 'tts_hook',
                vars={card_names},
            })
        else
            tts.say(localize{
                type = 'variable', 
                key = 'tts_discarded',
                vars = { #cards, localize('tts_card'..(#cards ~= 1 and 's' or '')) }
            }) 
        end
        return true
    end
}))
if not hook then
    G.E_MANAGER:add_event(Event({
        trigger = 'after',
        delay = 2.0*math.sqrt(G.SETTINGS.GAMESPEED),
        blocking = false,
        func = function()
            BlackHole.hover_suppressed = nil
            return true
        end
    })) 
end
"""
match_indent = true
