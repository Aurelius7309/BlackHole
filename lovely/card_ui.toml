[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

## Handle Card Info
# G.UIDEF.card_h_popup()
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "local card_type = localize('k_'..string.lower(AUT.card_type))"
position = "after"
payload = """
card.tts = ''
if card.highlighted then card.tts = card.tts..localize('tts_highlighted') end
if AUT.name and type(AUT.name) == 'table' then
    if AUT.name[1].config.object then
        card.tts = card.tts..AUT.name[1].config.object.string.. ' - '
    else
        local name_text = ''
        for _, v in ipairs(AUT.name) do
            if v.config and type(v.config.text) == 'string' then name_text = name_text..v.config.text end
        end
        card.tts = card.tts .. name_text .. ' - '
    end
end
local desc_text = ''
for _, v in ipairs(AUT.main) do
    for _, vv in ipairs(v) do
    local text_to_merge = ''
        if vv.config and type(vv.config.text) == 'string' then
            text_to_merge = vv.config.text
        elseif vv.config and vv.config.object and vv.config.object and vv.config.object.string then
            local str = vv.config.object.string
            if type(str) == 'table' then
                text_to_merge = table.concat(str, ' ')
            else
                text_to_merge = str
            end
        elseif vv.nodes and vv.nodes[1] and vv.nodes[1].config and type(vv.nodes[1].config.text) == 'string' then
            text_to_merge = vv.nodes[1].config.text
        end
        desc_text = desc_text..text_to_merge
    end
    desc_text = desc_text..' '
end
card.tts = card.tts..desc_text..'- '
"""
match_indent = true

# G.UIDEF.card_h_popup()
[[patches]]
[patches.regex]
target = 'functions/UI_definitions.lua'
pattern = '''(?<indent>[\t ]*)return \{n=G\.UIT\.ROOT, config = \{align = 'cm', colour = G\.C\.CLEAR\}, nodes=\{\n[\s\S]{8}\{n=G\.UIT\.C'''
position = 'before'
line_prepend = '$indent'
payload = ''' 
-- Badges
-- Note: make more advanced version that groups badge names with tooltips if they match. 
for i, v in ipairs(badges) do
    local badge_name = v.nodes[1].nodes[2].config.object.string

    card.tts = card.tts..badge_name..' - '
end

-- Tooltips
for _, v in ipairs(AUT.info) do
    -- Tooltip name
    card.tts = card.tts..v.name..' - '

    -- Tooltip Desc
    local tooltip_desc_text = ""
    for _, vv in ipairs(v) do 
        for _, vvv in ipairs(vv) do 
            if vvv.config and type(vvv.config.text) == 'string' then
                tooltip_desc_text = tooltip_desc_text..vvv.config.text
            elseif vvv.nodes and vvv.nodes[1] and vvv.nodes[1].config and type(vvv.nodes[1].config.text) == 'string' then
                tooltip_desc_text = tooltip_desc_text..vvv.nodes[1].config.text
            end
        end
        tooltip_desc_text = tooltip_desc_text.." "
    end
    
    card.tts = card.tts..tooltip_desc_text .. ' - '
end
'''