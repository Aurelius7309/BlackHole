[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

## Handle Card Info
# G.UIDEF.card_h_popup()
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "local card_type = localize('k_'..string.lower(AUT.card_type))"
position = "after"
payload = """
card.tts = ''
if AUT.name and type(AUT.name) == 'table' then
    if ((AUT.name[1] or {}).config or {}).object then
        card.tts = card.tts..AUT.name[1].config.object.string.. ' - '
    else
        local name_text = ''
        for _, v in ipairs(AUT.name) do
            if v.config and type(v.config.text) == 'string' then name_text = name_text..v.config.text end
        end
        card.tts = card.tts .. name_text .. ' - '
    end
end
if card.highlighted then
    card.tts = localize {
        type = 'variable',
        key = 'tts_highlighted',
        vars = { card.tts }
    }
end
local desc_text = ''
local in_collections = nil
for i, v in ipairs(G.your_collection or {}) do
    if card.area == v then in_collections = true end
end
if not (card.config.card_key and card.area ~= G.shop_jokers) and not (card.area == G.pack_cards or in_collections) then
    desc_text = desc_text..localize { type = 'variable', key = 'tts_current_money', vars = { G.GAME.dollars } }
    local shop_areas = { [G.shop_jokers or {}] = true, [G.shop_booster or {}] = true, [G.shop_vouchers or {}] = true }
    if card.cost and shop_areas[card.area or {}] then desc_text = desc_text..localize{type = "variable", key = "tts_card_cost", vars = {card.cost}} end
    if card.sell_cost and not shop_areas[card.area] then desc_text = desc_text..localize{type = "variable", key = "tts_card_sell", vars = {card.sell_cost}} end
end
for _, v in ipairs(AUT.main) do
    desc_text = desc_text..BlackHole.find_strings({to_search = v,
        search_params = {
            override = true,
            search = function(to_search, text_to_merge)
                if to_search.config and type(to_search.config.text) == 'string' then
                    text_to_merge = to_search.config.text
                elseif to_search.config and to_search.config.object and to_search.config.object.string then
                    local str = to_search.config.object.string
                    if type(str) == 'table' then
                        text_to_merge = table.concat(str, ' ')
                    else
                        text_to_merge = str
                    end
                elseif to_search.nodes and to_search.nodes[1] and to_search.nodes[1].config and type(to_search.nodes[1].config.text) == 'string' then
                    text_to_merge = to_search.nodes[1].config.text
                end
                return text_to_merge
            end
        }
    })..' '
end
card.tts = card.tts..desc_text..'- '
"""
match_indent = true

# G.UIDEF.card_h_popup()
[[patches]]
[patches.regex]
target = 'functions/UI_definitions.lua'
pattern = '''(?<indent>[\t ]*)return \{n=G\.UIT\.ROOT, config = \{align = 'cm', colour = G\.C\.CLEAR\}, nodes=\{\n[\s\S]{8}\{n=G\.UIT\.C'''
position = 'before'
line_prepend = '$indent'
payload = ''' 
-- Badges
for i, v in ipairs(badges) do
    local badge_name = v.nodes[1].nodes[2].config.object.string

    card.tts = card.tts..badge_name..' - '
end

-- Tooltips
for _, v in ipairs(AUT.info) do
    -- Tooltip name
    card.tts = card.tts..v.name..' - '

    -- Tooltip Desc
    local tooltip_desc_text = ""
    tooltip_desc_text = BlackHole.find_strings({to_search = v,
        search_params = {
            search = function(to_search, text_to_merge)
                if to_search.nodes and to_search.nodes[1] and to_search.nodes[1].config and type(to_search.nodes[1].config.text) == 'string' then
                    text_to_merge = to_search.nodes[1].config.text
                end
                return text_to_merge
            end
        },
        str_manip = function(text_to_merge)
            if text_to_merge:match('^%$+%+$') then
                text_to_merge = localize('$')..(text_to_merge:len() - 1)..' +'
            end
            if string.find(text_to_merge, '[%d%+]$') then text_to_merge = text_to_merge..' -' end
            return text_to_merge
        end
    })

    card.tts = card.tts..tooltip_desc_text .. ' - '
end
'''